// Sizing shortcuts
@mixin size($width, $height) {
  width: $width;
  height: $height;
}

// Font styles
@mixin font-opensans($size: false, $colour: false, $weight: false, $lh: false) {
  font-family: $kendo-font-family;

  @if $size {
    @include font-size($size);
  }

  @if $colour {
    color: $colour;
  }

  @if $weight {
    font-weight: $weight;
  }

  @if $lh {
    @include line-height($lh);
  }
}

// Link
@mixin link($color-link) {
  text-decoration: none;
  color: $color-link;
}

// List type
@mixin list-style {
  list-style: none;
  margin: 0;
  padding: 0;
}

// Absolute Position
@mixin absolute($top: null, $right: null, $bottom: null, $left: null) {
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
  position: absolute;
}

// Image Background
@mixin background($imgpath, $position: 0 0, $repeat: no-repeat) {
  background: {
    image: url($imgpath);
    position: $position;
    repeat: $repeat;
  }
}

// Triangle
@mixin arrow($width: 26px, $height: 26px, $direction: up, $color: $page) {
  @include size(0, 0); // Right

  @if $direction==right {
    border-top: $height/2 solid transparent;
    border-bottom: $height/2 solid transparent;
    border-left: $width solid $color;
  }

  // Left
  @if $direction==left {
    border-top: $height/2 solid transparent;
    border-bottom: $height/2 solid transparent;
    border-right: $width solid $color;
  }

  // Up
  @if $direction==up {
    border-left: $width/2 solid transparent;
    border-right: $width/2 solid transparent;
    border-bottom: $height/2 solid $color;
  }

  // Down
  @if $direction==down {
    border-left: $width/2 solid transparent;
    border-right: $width/2 solid transparent;
    border-top: $height/2 solid $color;
  }
}

// Usage
//  &:after {
//    @include arrow(54px, 54px, up, $page);
//    @include absolute(0, auto, auto, 0);
//    content: "";
//    margin:0;
// }

// Grid System
@mixin make-row() {
  display: flex;
  flex-wrap: wrap;
  margin-left: -($gutter-width);
  margin-right: -($gutter-width);
}

@mixin grid-system($device) {
  .col#{grid-class-name-generic($device)} {
    flex: 1;
  }

  @for $size from 1 through $grid-columns {
    .col#{grid-class-name($device, $size)} {
      width: calc($size / $grid-columns * 100%);
    }
  }
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min !=0, $min, null);
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);

  @if $min {
    @media (min-width: $min) {
      @content;
    }
  }

  @else {
    @content;
  }
}

@mixin scrollbar {
  &::-webkit-scrollbar {
    // @apply w-2.5;
    // @apply h-2.5;
    @apply w-4 h-4;
  }

  &::-webkit-scrollbar-track {
    @apply bg-secondary-light;
  }

  &::-webkit-scrollbar-thumb {
    @apply bg-dark/[0.3] rounded-xl;
  }

  &::-webkit-scrollbar-thumb:hover {
    @apply bg-primary;
  }
}